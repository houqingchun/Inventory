package com.ivt.mis;

import java.awt.Color;
import java.awt.Font;
import java.io.File;
import java.io.IOException;
import java.io.UnsupportedEncodingException;

import javax.swing.JFrame;
import javax.swing.UIManager;
import javax.swing.UnsupportedLookAndFeelException;

import org.apache.commons.io.FileUtils;
import org.apache.log4j.Logger;

import com.ivt.mis.common.Constants;
import com.ivt.mis.common.LicenseVerify;
import com.ivt.mis.common.SqlManager;
import com.ivt.mis.common.swing.SpringUtilities;
import com.ivt.mis.view.LicenseRegisterFrame;
import com.ivt.mis.view.LoginFrame;

public class Main {

	public static final Logger logger = Logger.getLogger(Main.class);

	public static void cleanTemporatyFiles() {
		// Clean temporary files that were generated by sqlite
		String path = Main.class.getResource("/").getPath();
		try {
			path = java.net.URLDecoder.decode(path, "utf-8");
		} catch (UnsupportedEncodingException e2) {
			e2.printStackTrace();
		}

		File files = new File(path);
		files.list();
		String[] fileNames = files.list(); 
		logger.debug("PATH:" + path);
		for (int i = 0; i < fileNames.length; i++) {
			String fileName = fileNames[i];
			logger.debug("File Name:" + fileNames[i]);
			if (fileName.startsWith("etilqs")) {
				File delFile = new File(path + fileNames[i]);
				logger.debug("File " + delFile.getName() + " Exists:"
						+ delFile.exists());
				if (delFile.exists()) {
					delFile.delete();
				}
			}
		}

		// Clean temporary folder where exported files were located.
		File tempFileFolder = new File(path + "temp");
		try {
			if (tempFileFolder.exists()) {
				FileUtils.cleanDirectory(tempFileFolder);
			}
		} catch (IOException e) {
			// TODO Auto-generated catch block
			e.printStackTrace();
		}

	}

	public static void main(String[] args) {
		Font f = new Font("宋体",Font.PLAIN,12);
		UIManager.put("Label.font",f);
		UIManager.put("Label.foreground",Color.black);
		UIManager.put("Button.font",f);
		UIManager.put("Menu.font",f);
		UIManager.put("MenuItem.font",f);
		UIManager.put("List.font",f);
		UIManager.put("CheckBox.font",f);
		UIManager.put("RadioButton.font",f);
		UIManager.put("ComboBox.font",f);
		UIManager.put("TextArea.font",f);
		UIManager.put("EditorPane.font",f);
		UIManager.put("ScrollPane.font",f);
		UIManager.put("ToolTip.font",f);
		UIManager.put("TextField.font",f);
		UIManager.put("TableHeader.font",f);
		UIManager.put("Table.font",f);
		UIManager.put("JFrame.font",f);
		UIManager.put("JInternalFrame.font", f);
		UIManager.put("Title.font", f);
		System.setProperty("file.encoding", "UTF-8");
		logger.info("System Encoding:" + System.getProperty("file.encoding")); 
		if (args.length == 1 && Boolean.valueOf(args[0])){
			Constants.IS_UPGRADE_MODE = true;
		}else{
			Constants.IS_UPGRADE_MODE = false;
		}
		
		cleanTemporatyFiles();
		SpringUtilities.initGlobalStyle();
		
		// 单机版首次加载时，自动创建数据库及建立相应表
		SqlManager manager = SqlManager.createInstance();
		File dbFile = new File("ivt.db");
		if (!dbFile.exists() && "sqlite".equalsIgnoreCase(manager.databaseType)) {
			manager.buildDatabase();
		}
		// 检查是否有更新
		manager.upgradeDatabase();

		//JFrame.setDefaultLookAndFeelDecorated(true);
		String verifyResult = LicenseVerify.verifyLicense();
		logger.debug("License check:" + verifyResult);
		if (verifyResult.equals(Constants.LICENSE_VALID)) {
			@SuppressWarnings("unused")
			LoginFrame loginFrame = new LoginFrame();
//			JFrame.setDefaultLookAndFeelDecorated(true);
		} else {
			@SuppressWarnings("unused")
			LicenseRegisterFrame licenseRegisterFrame = new LicenseRegisterFrame();
//			JFrame.setDefaultLookAndFeelDecorated(true);
		}

	}
}